#!/bin/bash

# NOTE: YOU CAN REMOVE ALL THESE ECHO'S.  I FIND THEM HELPFUL

set -e              # Willexit immediate if command exits with non-zero status
set -u              # Will print message if variable not set,
#set -x             # Prints the shell commands +
set -o pipefail     # Fail on a pipline like cmd1 | cmd2 | cmd3, rather then wait

exec 3>&1           # Make stdout available as fd 3 for the result
exec 1>&2           # Redirect all output to stderr for logging

# Get the working directory from arg $1
WORKING_DIR=$1
echo "WORKING_DIR = $WORKING_DIR"
echo "List whats in the working directory"
ls -lat $WORKING_DIR
echo ""

# We imported tree into the build.  Not needed, but fun to know how to do it.
cd $WORKING_DIR
tree

#  INPUT **************************************************************************************
# Read stdin (which is json paramter) to file
# -M = Monochrome output
# -S = Sort order, 
# . =  get everything.
jq -M -S . < /dev/stdin | tee /tmp/input.json    # tee redirects to a file.

echo "json stdin is:"
cat /tmp/input.json
echo ""

# PARSE THE JSON FILE /tmp/input.json 
param1=$(jq -r .params.param1 < /tmp/input.json)
param2=$(jq -r .params.param2 < /tmp/input.json)
source1=$(jq -r .source.source1 < /tmp/input.json)
source2=$(jq -r .source.source2 < /tmp/input.json)
echo "params are"
echo $param1 $param2
echo ""
echo "source are"
echo $source1 $source2
echo ""

echo "pwd is"
pwd 
echo ""

echo "List whats in top directory"
ls -lat 
echo ""

# SOME METATDATA YOU CAN USE
echo "BUILD_ID = $BUILD_ID"
echo "BUILD_NAME = $BUILD_NAME"
echo "BUILD_JOB_NAME = $BUILD_JOB_NAME"
echo "BUILD_PIPELINE_NAME = $BUILD_PIPELINE_NAME"
echo "ATC_EXTERNAL_URL = $ATC_EXTERNAL_URL"

# DO SOMETHING **************************************************************************************
# DO WHATEVER YOU NEED TO DO
#
monkeyname="henry"

# OUTPUT **************************************************************************************
json_output='{
    "version":{ "timestamp": "'$(date +%s)'" },
    "metadata": [
        { "name": "nameofmonkey", "value": "'$monkeyname'" },
        { "name": "author", "value": "Jeff DeCola" }
    ]
}'

echo "jason output is $json_output"

# -n don't read any input at all.  Construct froms scratch.
jq -n "$json_output" >&3
