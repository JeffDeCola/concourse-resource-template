#!/bin/bash
# concourse-resource-template in

set -e              # Will exit immediate if command exits with non-zero status
set -u              # Will print message if variable not set,
# set -x            # Prints the shell commands +
set -o pipefail     # Fail on a pipline like cmd1 | cmd2 | cmd3, rather then wait

exec 3>&1           # Make stdout available as fd 3 for the result
exec 1>&2           # Redirect all output to stderr for logging

# WHAT IS THIS?
echo "IN - GET"
echo ""

# CURRENT DIRECTORY
echo "pwd is"
pwd 
echo ""
echo "ls directory"
ls -lat 
echo ""

# CD WORKING DIRECTORY
WORKING_DIR=$1
echo "WORKING_DIR = $WORKING_DIR"
cd "$WORKING_DIR"
echo "pwd is"
pwd 
echo ""
echo "ls directory"
ls -lat 
echo ""

# REMEMBER WE ADDED TREE BINARY INTO THE BUILD
#echo "tree - Not sure there is anything to show here."
#tree
#echo ""

echo "PART 1 - INPUT ********************************************************************************"
echo "parse stdin"
echo ""

# READ stdin (which is json paramter) TO A FILE
# -M = Monochrome output
# -S = Sort order
# . =  get everything
jq -M -S . <&0 | tee get_input.json >/dev/null    # tee redirects to a file.

echo "json stdin is:"
cat get_input.json
echo ""

# PARSE THE JSON FILE get_input.json 
source1=$(jq -r .source.source1 < get_input.json)
source2=$(jq -r .source.source2 < get_input.json)
source3=$(jq -r .source.source3 < get_input.json)
param1=$(jq -r .params.param1 < get_input.json)
param2=$(jq -r .params.param2 < get_input.json)
param3=$(jq -r .params.param3 < get_input.json)
input_version=$(jq -r .version.ref < get_input.json)

# PRINT OUT THE INPUT
echo "source are:"
echo "    $source1"
echo "    $source2"
echo "    $source3"
echo "params are:"
echo "    $param1"
echo "    $param2"
echo "    $param3"
echo "version is:"
echo "    $input_version"
echo ""

# SOME METATDATA
echo "BUILD_ID = $BUILD_ID"
echo "BUILD_NAME = $BUILD_NAME"
echo "BUILD_JOB_NAME = $BUILD_JOB_NAME"
echo "BUILD_PIPELINE_NAME = $BUILD_PIPELINE_NAME"
echo "ATC_EXTERNAL_URL = $ATC_EXTERNAL_URL"
echo ""

echo "PART 2 - GET SOMETHING ************************************************************************"
echo "Mimic a fetch and place a get_fetched.json file in the working directory"
echo "You have the source, params and fectched what you needed"
echo ""

# MIMIC - MUST GET SAME VERSION TO CHECK - THIS IS NOT PASSED
# **************
version=$input_version
# **************

# MIMIC FETCH - CREATE A JSON FILE
json_get_fetch='{
    "version": { 
        "ref": "'$version'" 
    },
    "author": "Jeff DeCola",
    "author_date": "March 2023"
}'
jq -n "$json_get_fetch" > get_fetch.json

echo "cat get_fetch.json"
cat get_fetch.json
echo ""

# PARSE THE JSON FILE get_fetch.json 
version=$(jq -r .version.ref < get_fetch.json)
author=$(jq -r .author < get_fetch.json)
author_date=$(jq -r .author_date < get_fetch.json)

# PRINT OUT THE FETCH
echo " version      $version"
echo " author       $author"
echo " autho_date   $author_date"
echo ""

echo "ls directory"
ls -lat 
echo ""

echo "PART 3 - OUTPUT *******************************************************************************"
echo "send stdout"
echo ""

# CREATE OUTPUT
json_get_output='{
    "version":{ "ref": "'$version'" },
    "metadata": [
        { "name": "author", "value": "'$author'" },
        { "name": "author_date", "value": "'$author_date'" },
        { "name": "executable", "value": "in" },
        { "name": "version", "value": "'$version'" }
    ]
}'
jq -n "$json_get_output" > get_output.json

echo "json stdout is:"
cat get_output.json
echo ""

echo "ls directory"
ls -lat 
echo ""

# OUTPUT JSON TO STDOUT
# -n don't read any input at all.  Construct froms scratch.
jq -n "$json_get_output" >&3
