#!/bin/bash
# concourse-resource-template check

set -e              # Will exit immediate if command exits with non-zero status
set -u              # Will print message if variable not set,
# set -x            # Prints the shell commands +
set -o pipefail     # Fail on a pipline like cmd1 | cmd2 | cmd3, rather then wait

exec 3>&1           # Make stdout available as fd 3 for the result
exec 1>&2           # Redirect all output to stderr for logging

# WHAT IS THIS?
echo "CHECK"
echo ""

# CURRENT DIRECTORY
echo "pwd is"
pwd 
echo ""
echo "ls directory"
ls -lat 
echo ""

echo "PART 1 - INPUT ********************************************************************************"
echo "parse stdin"
echo ""

# READ stdin (which is json paramter) TO A FILE
# -M = Monochrome output
# -S = Sort order
# . =  get everything
jq -M -S . <&0 | tee get_input.json >/dev/null    # tee redirects to a file.

echo "json stdin is:"
cat get_input.json
echo ""

# PARSE THE JSON FILE get_input.json 
source1=$(jq -r .source.source1 < get_input.json)
source2=$(jq -r .source.source2 < get_input.json)
source3=$(jq -r .source.source3 < get_input.json)
ref=$(jq -r .version.ref < get_input.json)

# PRINT OUT THE INPUT
echo "source are:"
echo "    $source1"
echo "    $source2"
echo "    $source3"
echo "ref is:"
echo "    $ref"
echo ""

echo "PART 2 - GET SOMETHING ************************************************************************"
echo "Mimic getting the ver from a source"
echo "You have the source info and the ref version"
echo ""

# Here you would check the ref version and get the next version
# I'm just going to mimic it

# NOTE: THIS WILL LOOP TILL VER 5
echo "Make New Version"
echo "ref first time is null"
if [ "$ref" == "null" ]
then
      echo "ref is null - set to 0"
      ref=0
else
      echo "ref is NOT null - do nothing"
fi

echo "LOOP TILL VERSION 5"
if [ "$ref" == "4" ]
then
      echo "DONE INCREMENTING VERSION"
      ref=0
else
      # ADD 1 TO VERSION
      echo "Add 1 to version"
      ((ver=ref+1))
fi

echo "The version is $ver"
echo ""

echo "PART 3 - OUTPUT *******************************************************************************"
echo "send stdout"
echo ""

# CREATE OUTPUT
json_check_output='[
    { "ref": "'$ver'" }
]'
jq -n "$json_check_output" > check_output.json

echo "json stdout is:"
cat check_output.json
echo ""

echo "ls directory"
ls -lat 
echo ""

# OUTPUT JSON TO STDOUT
# -n don't read any input at all.  Construct froms scratch.
jq -n "$json_check_output" >&3
